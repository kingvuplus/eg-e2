<!--suppress XmlUnboundNsPrefix -->
<wizard>
		<step id="start" >
			<text value="Please connect your %s %s to the internet" />
			<displaytext value="Please connect your %s %s to the internet" />
			<list>
				<listentry caption="Check the internet connection" step="update" />
				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="update">
			<text value="Checking the internet connection" />
			<config screen="InstallWizard" module="InstallWizard" args="0" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
		<step id="networkfailed" >
			<condition>
self.condition = not config.misc.installwizard.ipkgloaded.value
			</condition>
			<text value="Your %s %s does not have an internet connection" />
			<displaytext value="Your %s %s is not connected to the internet" />
			<list>
				<listentry caption="Check the internet connection again" step="update" />
				<listentry caption="Skip internet connection check (disables automatic package installation)" step="nima" />
			</list>
			<code>
self.clearSelectedKeys()
self.selectKey("UP")
self.selectKey("DOWN")
			</code>
		</step>
		<step id="nima">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 0 and not nimmanager.nim_slots[0].empty
			</condition>
			<text value="Please set up tuner A" />
			<config screen="NimSetup" module="Satconfig" args="0" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimb">
			<condition>
from Components.NimManager import nimmanager
self.condition = len(nimmanager.nim_slots) > 1 and not nimmanager.nim_slots[1].empty
			</condition>
			<text value="Please set up tuner B" />
			<config screen="NimSetup" module="Satconfig" args="1" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimc">
			<condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 2 and not nimmanager.nim_slots[2].empty and not isFBCLink(nimmanager.nim_slots[2])
			</condition>
			<text value="Please set up tuner C" />
			<config screen="NimSetup" module="Satconfig" args="2" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nimd">
			<condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 3 and not nimmanager.nim_slots[3].empty and not isFBCLink(nimmanager.nim_slots[3])
			</condition>
			<text value="Please set up tuner D" />
			<config screen="NimSetup" module="Satconfig" args="3" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="nime">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 4 and not nimmanager.nim_slots[4].empty and not isFBCLink(nimmanager.nim_slots[4])
            </condition>
			<text value="Please set up tuner E" />
			<displaytext value="Please set up tuner E" />
			<config screen="NimSetup" module="Satconfig" args="4" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimf">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 5 and not nimmanager.nim_slots[5].empty and not isFBCLink(nimmanager.nim_slots[5])
            </condition>
			<text value="Please set up tuner F" />
			<displaytext value="Please set up tuner F" />
			<config screen="NimSetup" module="Satconfig" args="5" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimg">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 6 and not nimmanager.nim_slots[6].empty and not isFBCLink(nimmanager.nim_slots[6])
            </condition>
			<text value="Please set up tuner G" />
			<displaytext value="Please set up tuner G" />
			<config screen="NimSetup" module="Satconfig" args="6" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimh">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 7 and not nimmanager.nim_slots[7].empty and not isFBCLink(nimmanager.nim_slots[7])
            </condition>
			<text value="Please set up tuner H" />
			<displaytext value="Please set up tuner H" />
			<config screen="NimSetup" module="Satconfig" args="7" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimi">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 8 and not nimmanager.nim_slots[8].empty and not isFBCLink(nimmanager.nim_slots[8])
            </condition>
			<text value="Please set up tuner I" />
			<displaytext value="Please set up tuner I" />
			<config screen="NimSetup" module="Satconfig" args="8" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
               <step id="nimj">
                       <condition>
from Components.NimManager import nimmanager
from Screens.Satconfig import isFBCLink
self.condition = len(nimmanager.nim_slots) > 9 and not nimmanager.nim_slots[9].empty and not isFBCLink(nimmanager.nim_slots[9])
            </condition>
			<text value="Please set up tuner J" />
			<displaytext value="Please set up tuner J" />
			<config screen="NimSetup" module="Satconfig" args="9" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
                       </code>
               </step>
		<step id="channels">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value and (nimmanager.nim_slots[0].isCompatible("DVB-S") or  nimmanager.nim_slots[1].isCompatible("DVB-S"))
			</condition>
			<text value="Do you want to install a channel list?" />
			<config screen="InstallWizard" module="InstallWizard" args="1" type="ConfigList" />
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="scanquestion">
			<text value="Do you want to do a service scan?" />
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<list>
				<listentry caption="No" step="softcam" />
				<listentry caption="Yes, do an automatic scan now" step="scan" />
				<listentry caption="Yes, do a manual scan now" step="manualscan" />
			</list>
		</step>
		<step id="scan" nextstep="softcam">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="What do you want to scan?" />
			<config screen="ScanSimple" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="manualscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="What do you want to scan?" />
			<config screen="ScanSetup" module="ScanSetup" type="ConfigList" />
		</step>
		<step id="nextscan">
			<condition>
from Components.NimManager import nimmanager
self.condition = nimmanager.somethingConnected() and not config.misc.installwizard.channellistdownloaded.value
			</condition>
			<text value="Do you want to do another manual service scan?" />
			<list>
				<listentry caption="No" step="softcam" />
				<listentry caption="Yes, do another manual scan now" step="manualscan" />
			</list>
		</step>
		<step id="softcam">
			<condition>
self.condition = config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
			</condition>
			<text value="Would you like to install a softcam?"/>
			<config screen="InstallWizard" module="InstallWizard" args="2" type="ConfigList"/>
			<code>
self.clearSelectedKeys()
self.selectKey("LEFT")
self.selectKey("RIGHT")
			</code>
		</step>
		<step id="skinselect1">
			<text value="Do you want to preview and install new skins ?" />
			<list>
				<listentry caption="No" step="speedup1" />
				<listentry caption="Yes, install new skins" step="skinselect2" />
			</list>
		</step>
		<step id="skinselect2">
			<text value="Please press OK to get latest skin list" />
			<displaytext value="Please press OK to get latest skin list" />
			<code pos="after">
self.condition = config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
if self.condition:
	self.EGAMI_SkinSelector_Wizard()
			</code>
		</step>
<!--		<step id="speedup1">
			<text value="Do you want to activate and configure EGAMI Speed UP ?" />
			<list>
				<listentry caption="No" step="expert" />
				<listentry caption="Yes, speed up EGAMI !" step="speedup2" />
			</list>
		</step>
		<step id="speedup2">
			<text value="Would you like to turn on EGAMI Speed UP ? This feautre will load plugins after LiveTV appear !" />
			<displaytext value="Would you like to turn on EGAMI Speed UP ? This feautre will load plugins after LiveTV appear !" />
			<list type="config" configelement="config.usage.async_plug_load" />
			<code pos="after">
self.condition = config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
if self.condition:
	self.EGAMI_SpeedUP_Wizard()
			</code>
		</step>-->
		<step id="speedup1">
			<text value="Would you like to install some default plugins such as IPTV Player ?" />
			<displaytext value="Would you like to install some default plugins such as IPTV Player ?" />
			<code pos="after">
self.condition = config.misc.installwizard.hasnetwork.value and config.misc.installwizard.ipkgloaded.value
if self.condition:
	self.EGAMI_SpeedUP_Wizard()
			</code>
		</step>
		<step id="expert">
			<text value="Your %s %s offers three levels of configuration options:\n\nSimple - We suggest this level if this is your first contact with a %s %s.\nIntermediate - This level enables you to change some more options, mainly the graphical user interface and the behaviour of your %s %s.\nExpert - This gives you full control over all available settings of your %s %s.\n\nWarning: Higher levels may lead to increased usage complexity." />
			<displaytext value="Your %s %s offers three levels of configuration options:\n\nSimple - We suggest this level if this is your first contact with a %s %s.\nIntermediate - This level enables you to change some more options, mainly the graphical user interface and the behaviour of your %s %s.\nExpert - This gives you full control over all available settings of your %s %s.\n\nWarning: Higher levels may lead to increased usage complexity." />
			<list type="config" configelement="config.usage.setup_level" />
		</step>
		<step id="end" laststep="true">
			<condition>
self.condition = self.isLastWizard
			</condition>
			<text value="Thank you for using the wizard. Your %s %s is now ready to use.\nPlease press OK to start using your %s %s." />
			<displaytext value="Thank you for using the wizard. Your %s %s is now ready to use.\nPlease press OK to start using your %s %s." />
			<code>
self.clearSelectedKeys()
self.selectKey("OK")
			</code>
		</step>
</wizard>
